<?php

/**
 * @file
 * Install, update and uninstall functions for the LocalGov Elections Module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\EntityStorageException;

/**
 * Implements hook_install().
 */
function localgov_elections_install($is_syncing) {
  $module_path = \Drupal::getContainer()
    ->get('module_handler')
    ->getModule('localgov_elections')
    ->getPath();

  $overrides = $module_path . '/config/override';
  $files = new FileStorage($overrides);

  foreach ($files->listAll() as $id) {
    $config_data = $files->read($id);
    $config = \Drupal::configFactory()->getEditable($id);
    $config->setData($config_data)->save();
  }
}

/**
 * Implements hook_uninstall().
 */
function localgov_elections_uninstall($is_syncing) {
  $storage_handler = \Drupal::entityTypeManager()
    ->getStorage('node');
  $nodes = $storage_handler->loadByProperties(['type' => 'localgov_election']);
  try {
    $storage_handler->delete($nodes);
  }
  catch (EntityStorageException $e) {
  }
  $nodes = $storage_handler->loadByProperties(['type' => 'localgov_area_vote']);
  try {
    $storage_handler->delete($nodes);
  }
  catch (EntityStorageException $e) {
  }
}

/*
 * Update results view for already installed module
 */
function localgov_elections_update_10001(&$sandbox) {

  $config_obj = \Drupal::configFactory()->getEditable('views.view.localgov_election_results');
  $config_obj->set('display.block_3.display_options.fields.localgov_election_votes.alter.alter_text', TRUE);
  $config_obj->set('display.block_3.display_options.fields.localgov_election_votes.alter.text', '{% if localgov_election_votes_final  == \"1\" %}\r\n{{ localgov_election_votes }} \r\n{% endif %}');
  $config_obj->save();

  Drupal::logger('localgov_elections')->notice("Updated results view");
}
